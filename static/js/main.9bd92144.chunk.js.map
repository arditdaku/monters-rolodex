{"version":3,"sources":["components/card/card.comopnent.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","fill","stroke","strokeLinecap","strokeLinejoin","strokeWidth","viewBox","d","onChange","App","useState","users","setUsers","search","setSearch","useEffect","fetch","then","res","json","data","searchField","filteredMonsters","filter","toLowerCase","includes","e","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2LAEaA,EAAO,SAACC,GAAD,OAClB,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BACHC,IAAI,YAEN,oBAAIJ,UAAU,YAAd,SAA2BD,EAAMG,QAAQG,OACzC,mBAAGL,UAAU,aAAb,SAA2BD,EAAMG,QAAQI,YCNhCC,EAAW,SAACR,GACvB,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAACP,GAAD,OAClB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCLdO,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,qBAAKZ,UAAU,0BAAf,SACE,sBAAKA,UAAU,oDAAf,UACE,sBAAMA,UAAU,mDAAhB,SACE,wBACEa,KAAK,SACLb,UAAU,8CAFZ,SAIE,qBACEc,KAAK,OACLC,OAAO,eACPC,cAAc,QACdC,eAAe,QACfC,YAAY,IACZC,QAAQ,YACRnB,UAAU,UAPZ,SASE,sBAAMoB,EAAE,sDAId,uBACEP,KAAK,SACLR,KAAK,IACLL,UAAU,4JACVW,YAAaA,EACbU,SAAUT,UCEHU,MA1Bf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEeF,mBAAS,IAFxB,mBAENG,EAFM,KAEEC,EAFF,KAGbC,qBAAU,kBACRC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAUR,EAASQ,SAE7B,IACMC,EAAcR,EACdS,EAFUX,EAEiBY,QAAO,SAAClC,GAAD,OACtCA,EAAQG,KAAKgC,cAAcC,SAASJ,EAAYG,kBAIlD,OACE,sBAAKrC,UAAU,kEAAf,UACE,qBAAKA,UAAU,mBAAf,SACE,oBAAIA,UAAU,oCAAd,gCAEF,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAPxB,SAAC2B,GAAD,OAAOZ,EAAUY,EAAEC,OAAOC,UAQ3C,cAAC,EAAD,CAAUjC,SAAU2B,QCbXO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.9bd92144.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Card = (props) => (\n  <div className=\"card-container\">\n    <img\n      src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n      alt=\"monster\"\n    />\n    <h2 className=\"card-name\">{props.monster.name}</h2>\n    <p className=\"card-email\">{props.monster.email}</p>\n  </div>\n);\n","import React from \"react\";\nimport { Card } from \"../card/card.comopnent\";\n\nexport const CardList = (props) => {\n  return (\n    <div className=\"card-list\">\n      {props.monsters.map((monster) => (\n        <Card key={monster.id} monster={monster} />\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n  <div className=\"flex justify-center p-5\">\n    <div className=\"relative text-gray-600 focus-within:text-gray-400\">\n      <span className=\"absolute inset-y-0 left-0 flex items-center pl-2\">\n        <button\n          type=\"submit\"\n          className=\"p-1 focus:outline-none focus:shadow-outline\"\n        >\n          <svg\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"2\"\n            viewBox=\"0 0 24 24\"\n            className=\"w-6 h-6\"\n          >\n            <path d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"></path>\n          </svg>\n        </button>\n      </span>\n      <input\n        type=\"search\"\n        name=\"q\"\n        className=\"py-2 text-sm text-white placeholder-gray-50 focus:placeholder-gray-400 bg-gray-400 rounded-md pl-10 focus:outline-none focus:bg-white focus:text-gray-900\"\n        placeholder={placeholder}\n        onChange={handleChange}\n      />\n    </div>\n  </div>\n);\n","import { useEffect, useState } from \"react\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\nfunction App() {\n  const [users, setUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  useEffect(() =>\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((res) => res.json())\n      .then((data) => setUsers(data))\n  );\n  const monstes = users;\n  const searchField = search;\n  const filteredMonsters = monstes.filter((monster) =>\n    monster.name.toLowerCase().includes(searchField.toLowerCase())\n  );\n  const handleChange = (e) => setSearch(e.target.value);\n\n  return (\n    <div className=\"mt-3 min-h-screen flex flex-col h-2/5 dark:bg-gray-800 bg-white\">\n      <div className=\"text-center pt-4\">\n        <h1 className=\"text-blue-200 text-3xl  font-bold\">Monsters Rolodex</h1>\n      </div>\n      <SearchBox placeholder=\"Search monsters\" handleChange={handleChange} />\n      <CardList monsters={filteredMonsters} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}